---
import type { EmissionsScope } from '@/data/companyData'
import TruckIcon from '~icons/local/truck'
import PlaneIcon from '~icons/local/plane'
import CompassIcon from '~icons/local/compass'
import WarehouseIcon from '~icons/local/warehouse'
import WormIcon from '~icons/local/worm'
import Scope3EmissionsCategory from '../company/Scope3EmissionsCategory.astro'

interface Props {
  emissions: EmissionsScope['categories']
}

const { emissions } = Astro.props

type Scope3Category = keyof Exclude<EmissionsScope['categories'], undefined>

type CategoryDefinition = {
  title: string
  description: string
  Icon: astroHTML.JSX.Element
}

type ReportedCategoryDefinition = CategoryDefinition & {
  value: number
  category: Scope3Category
}

const categoryDefinitions: Record<Scope3Category, CategoryDefinition> = {
  '1_purchasedGoods': {
    title: 'Inköpta varor och tjänster',
    description:
      'Utsläpp från produktion av varor och tjänster som köpts av organisationen.',
    Icon: TruckIcon,
  },
  '2_capitalGoods': {
    title: 'Kapitalvaror',
    description: '',
    Icon: undefined,
  },
  '3_fuelAndEnergyRelatedActivities': {
    title: 'Bränsle- och energirelaterade aktiviteter',
    description: '',
    Icon: undefined,
  },
  '4_upstreamTransportationAndDistribution': {
    title: 'Uppströms transport och distribution',
    description:
      'Utsläpp från transport och distribution av produkter som köpts av organisationen, dvs från sina leverantörer.',
    Icon: WarehouseIcon,
  },
  '5_wasteGeneratedInOperations': {
    title: 'Avfall genererat i verksamheten',
    description:
      'Utsläpp från avfall som genereras av organisationens verksamhet.',
    Icon: WormIcon,
  },
  '6_businessTravel': {
    title: 'Affärsresor',
    description:
      'Utsläpp från transport av anställda för affärsrelaterade aktiviteter.',
    Icon: PlaneIcon,
  },
  '7_employeeCommuting': {
    title: 'Anställdas pendling',
    description:
      'Utsläpp från transport av anställda mellan deras hem och arbetsplatser.',
    Icon: CompassIcon,
  },
  '8_upstreamLeasedAssets': {
    title: 'Uppströms leasade tillgångar',
    description: '',
    Icon: undefined,
  },
  '9_downstreamTransportationAndDistribution': {
    title: 'Nedströms transport och distribution',
    description: '',
    Icon: undefined,
  },
  '10_processingOfSoldProducts': {
    title: 'Bearbetning av sålda produkter',
    description: '',
    Icon: undefined,
  },
  '11_useOfSoldProducts': {
    title: 'Användning av sålda produkter',
    description: '',
    Icon: undefined,
  },
  '12_endOfLifeTreatmentOfSoldProducts': {
    title: 'Slutbehandling av sålda produkter',
    description: '',
    Icon: undefined,
  },
  '13_downstreamLeasedAssets': {
    title: 'Nedströms leasade tillgångar',
    description: '',
    Icon: undefined,
  },
  '14_franchises': { title: 'Franchiser', description: '', Icon: undefined },
  '15_investments': {
    title: 'Investeringar',
    description: '',
    Icon: undefined,
  },
  '16_other': { title: 'Övrigt', description: '', Icon: undefined },
}

function getReportedCategories(
  emissions: EmissionsScope['categories'],
): ReportedCategoryDefinition[] {
  return emissions
    ? Object.entries(emissions).reduce((categories, [category, value]) => {
        if (value) {
          categories.push({
            ...categoryDefinitions[category as Scope3Category],
            category: category as Scope3Category,
            value,
          })
        }
        return categories
      }, [] as ReportedCategoryDefinition[])
    : []
}
---

{
  emissions ? (
    <div class="grid gap-4">
      <div class="font-semibold">Scope 3 utsläppskategorier</div>
      <div class="grid gap-4">
        {getReportedCategories(emissions).map(
          ({ Icon, title, description, value }) => (
            <Scope3EmissionsCategory
              {Icon}
              {title}
              {description}
              value={value.toLocaleString('sv-se')}
            />
          ),
        )}
      </div>
    </div>
  ) : null
}
