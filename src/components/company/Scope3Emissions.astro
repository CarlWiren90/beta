---
import {
  getCompanyName,
  type CompanyData,
  type EmissionsScope,
  type Scope3Category,
} from '@/data/companyData'
import Fa6SolidGifts from 'icons:astro/fa6-solid/gifts'
import MingcuteWashMachineLine from 'icons:astro/mingcute/wash-machine-line'
import IconParkOutlineSolarEnergyOne from 'icons:astro/icon-park-outline/solar-energy-one'
import IconParkOutlineTransport from 'icons:astro/icon-park-outline/transport'
import MakiWasteBasket from 'icons:astro/maki/waste-basket'
import ZondiconsTravelTrain from 'icons:astro/zondicons/travel-train'
import MaterialSymbolsCommuteOutline from 'icons:astro/material-symbols/commute-outline'
import IconParkOutlineWashingMachineOne from 'icons:astro/icon-park-outline/washing-machine-one'
import IconParkOutlineTransporter from 'icons:astro/icon-park-outline/transporter'
import IconParkOutlineGateMachine from 'icons:astro/icon-park-outline/gate-machine'
import MaterialSymbolsPersonPlayOutlineRounded from 'icons:astro/material-symbols/person-play-outline-rounded'
import IonTrashBin from 'icons:astro/ion/trash-bin'
import ClarityBuildingSolid from 'icons:astro/clarity/building-solid'
import BiHouses from 'icons:astro/bi/houses'
import StreamlineInvestmentSelection from 'icons:astro/streamline/investment-selection'
import Scope3EmissionsCategory from '../company/Scope3EmissionsCategory.astro'
import { Card } from '../ui/card'

interface Props {
  company: CompanyData
  year: number
}

const { company, year } = Astro.props

type CategoryDefinition = {
  title: string
  description: string
  Icon: astroHTML.JSX.Element
}

type ReportedCategoryDefinition = CategoryDefinition & {
  value: number | null
  category: Scope3Category
}

export const categoryDefinitions: Record<Scope3Category, CategoryDefinition> = {
  '1_purchasedGoods': {
    title: '1. Inköpta varor och tjänster',
    description:
      'Utsläpp från produktion av varor och tjänster som köps av organisationen.',
    Icon: Fa6SolidGifts,
  },
  '2_capitalGoods': {
    title: '2. Kapitalvaror',
    description:
      'Utsläpp från produktion av kapitalvaror som köps av organisationen.',
    Icon: MingcuteWashMachineLine,
  },
  '3_fuelAndEnergyRelatedActivities': {
    title: '3. Bränsle- och energirelaterade aktiviteter',
    description:
      'Utsläpp från produktion av bränslen och energi som köps av organisationen, inklusive transport och distribution, som inte inkluderas i scope 2.',
    Icon: IconParkOutlineSolarEnergyOne,
  },
  '4_upstreamTransportationAndDistribution': {
    title: '4. Uppströms transport och distribution',
    description:
      'Utsläpp från transport och distribution av inköpta varor mellan leverantörer och/eller inom organisationen.',
    Icon: IconParkOutlineTransport,
  },
  '5_wasteGeneratedInOperations': {
    title: '5. Avfall genererat i verksamheten',
    description:
      'Utsläpp från behandling av avfall som genereras av organisationen.',
    Icon: MakiWasteBasket,
  },
  '6_businessTravel': {
    title: '6. Tjänsteresor',
    description:
      'Utsläpp från resor i tjänsten med fordon som inte ägs av organisationen.',
    Icon: ZondiconsTravelTrain,
  },
  '7_employeeCommuting': {
    title: '7. Pendlingsresor',
    description:
      'Utsläpp från anställdas resor mellan hemmet och arbetsplatsen.',
    Icon: MaterialSymbolsCommuteOutline,
  },
  '8_upstreamLeasedAssets': {
    title: '8. Uppströms leasade tillgångar',
    description:
      'Utsläpp från verksamhet i leasade tillgångar som inte inkluderas i scope 1 och 2.',
    Icon: IconParkOutlineWashingMachineOne,
  },
  '9_downstreamTransportationAndDistribution': {
    title: '9. Nedströms transport och distribution',
    description:
      'Utsläpp från transport och distribution av sålda varor mellan organisationen och kund.',
    Icon: IconParkOutlineTransporter,
  },
  '10_processingOfSoldProducts': {
    title: '10. Bearbetning av sålda produkter',
    description: 'Utsläpp från vidareförädling av sålda insatsvaror.',
    Icon: IconParkOutlineGateMachine,
  },
  '11_useOfSoldProducts': {
    title: '11. Användning av sålda produkter',
    description: 'Utsläpp från användning av sålda produkter av kunden.',
    Icon: MaterialSymbolsPersonPlayOutlineRounded,
  },
  '12_endOfLifeTreatmentOfSoldProducts': {
    title: '12. Slutbehandling av sålda produkter',
    description:
      'Utsläpp från avfallshantering av sålda produkter vid slutet av livscykeln.',
    Icon: IonTrashBin,
  },
  '13_downstreamLeasedAssets': {
    title: '13. Nedströms leasade tillgångar',
    description:
      'Utsläpp från verksamhet i nedströms leasade tillgångar som inte inkluderas i scope 1 och 2.',
    Icon: ClarityBuildingSolid,
  },
  '14_franchises': {
    title: '14. Franchiser',
    description:
      'Utsläpp från franchisetagares verksamhet som inte inkluderas i scope 1 och 2.',
    Icon: BiHouses,
  },
  '15_investments': {
    title: '15. Investeringar',
    description:
      'Utsläpp från organisationens investeringar i andra företag, samt andra finansierade utsläpp.',
    Icon: StreamlineInvestmentSelection,
  },
}

function getReportedCategories(
  emissions: EmissionsScope['categories'],
): ReportedCategoryDefinition[] {
  return Object.entries(categoryDefinitions).reduce(
    (categories, [category, definition]) => {
      const value = emissions?.[category as Scope3Category] ?? null

      if (value || definition) {
        categories.push({
          ...definition,
          category: category as Scope3Category,
          value,
        })
      }
      return categories
    },
    [] as ReportedCategoryDefinition[],
  )
}

const companyName = getCompanyName(company)
const emissions = company.emissions[year].scope3.categories

const reportedCategories = getReportedCategories(emissions)
const reportedCount = reportedCategories.filter((c) => c.value !== null).length

const upstream = reportedCategories.slice(0, 8)
const downstream = reportedCategories.slice(8)

/**
 * Get all categories that don't align with the GHG protocol
 */
function getNonStandardCategories(categories?: Record<string, any> | null) {
  return Object.keys(categories ?? {}).filter(
    (category) =>
      !categoryDefinitions[category as Scope3Category] &&
      category !== '16_other',
  )
}

const nonStandardCategoriesCount = getNonStandardCategories(emissions).length
---

{
  emissions ? (
    <Card class="grid gap-8" level={2}>
      <div>
        <h3 class="text-balance pb-2 text-xl tracking-tight sm:leading-none lg:text-2xl">
          {companyName} rapporterar
          <span class="text-nowrap">
            <span class="text-orange-250">{reportedCount}</span> / 15
          </span>
          kategorier:
        </h3>
        {Boolean(nonStandardCategoriesCount) && (
          <p class="text-sm text-muted">
            Utöver det anges
            {`${nonStandardCategoriesCount} kategori${nonStandardCategoriesCount > 1 ? 'er' : ''} `}
            som inte följer GHG-protokollet.
          </p>
        )}
        <p class="text-sm text-muted">
          Företag ska rapportera i alla kategorier som är relevanta för
          verksamheten.
        </p>
      </div>

      {upstream.length ? (
        <div class="grid gap-2 text-sm">
          <h4 class="flex items-center justify-between pb-2 text-lg leading-none tracking-tight">
            Uppströms
            <span class="pr-4 text-base text-muted xs:text-lg">(ton CO₂e)</span>
          </h4>
          {upstream.map(({ Icon, title, description, value }) => (
            <Scope3EmissionsCategory
              {Icon}
              {title}
              {description}
              value={value?.toLocaleString('sv-SE')}
            />
          ))}
        </div>
      ) : null}

      {downstream.length ? (
        <div class="grid gap-2 text-sm">
          <h4 class="flex items-center justify-between pb-2 text-lg leading-none tracking-tight">
            Nedströms
            <span class="pr-4 text-base text-muted xs:text-lg">(ton CO₂e)</span>
          </h4>
          {downstream.map(({ Icon, title, description, value }) => (
            <Scope3EmissionsCategory
              {Icon}
              {title}
              {description}
              value={value?.toLocaleString('sv-SE')}
            />
          ))}
        </div>
      ) : null}
    </Card>
  ) : null
}
