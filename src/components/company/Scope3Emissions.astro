---
import type { EmissionsScope, Scope3Category } from '@/data/companyData'
import TruckIcon from '~icons/local/truck'
import PlaneIcon from '~icons/local/plane'
import CompassIcon from '~icons/local/compass'
import WarehouseIcon from '~icons/local/warehouse'
import WormIcon from '~icons/local/worm'
import Scope3EmissionsCategory from '../company/Scope3EmissionsCategory.astro'
import { Card } from '../ui/card'

interface Props {
  emissions: EmissionsScope['categories']
  companyName: string
}

const { emissions, companyName } = Astro.props

type CategoryDefinition = {
  title: string
  description: string
  Icon: astroHTML.JSX.Element
}

type ReportedCategoryDefinition = CategoryDefinition & {
  value: number
  category: Scope3Category
}

const categoryDefinitions: Record<Scope3Category, CategoryDefinition> = {
  '1_purchasedGoods': {
    title: '1. Inköpta varor och tjänster',
    description:
      'Utsläpp från produktion av varor och tjänster som köpts av organisationen.',
    Icon: TruckIcon,
  },
  '2_capitalGoods': {
    title: '2. Kapitalvaror',
    description: '',
    Icon: undefined,
  },
  '3_fuelAndEnergyRelatedActivities': {
    title: '3. Bränsle- och energirelaterade aktiviteter',
    description: '',
    Icon: undefined,
  },
  '4_upstreamTransportationAndDistribution': {
    title: '4. Uppströms transport och distribution',
    description:
      'Utsläpp från transport och distribution av produkter som köpts av organisationen, dvs från sina leverantörer.',
    Icon: WarehouseIcon,
  },
  '5_wasteGeneratedInOperations': {
    title: '5. Avfall genererat i verksamheten',
    description:
      'Utsläpp från avfall som genereras av organisationens verksamhet.',
    Icon: WormIcon,
  },
  '6_businessTravel': {
    title: '6. Affärsresor',
    description:
      'Utsläpp från transport av anställda för affärsrelaterade aktiviteter.',
    Icon: PlaneIcon,
  },
  '7_employeeCommuting': {
    title: '7. Anställdas pendling',
    description:
      'Utsläpp från transport av anställda mellan deras hem och arbetsplatser.',
    Icon: CompassIcon,
  },
  '8_upstreamLeasedAssets': {
    title: '8. Uppströms leasade tillgångar',
    description: '',
    Icon: undefined,
  },
  '9_downstreamTransportationAndDistribution': {
    title: '9. Nedströms transport och distribution',
    description: '',
    Icon: undefined,
  },
  '10_processingOfSoldProducts': {
    title: '10. Bearbetning av sålda produkter',
    description: '',
    Icon: undefined,
  },
  '11_useOfSoldProducts': {
    title: '11. Användning av sålda produkter',
    description: '',
    Icon: undefined,
  },
  '12_endOfLifeTreatmentOfSoldProducts': {
    title: '12. Slutbehandling av sålda produkter',
    description: '',
    Icon: undefined,
  },
  '13_downstreamLeasedAssets': {
    title: '13. Nedströms leasade tillgångar',
    description: '',
    Icon: undefined,
  },
  '14_franchises': {
    title: '14. Franchiser',
    description: '',
    Icon: undefined,
  },
  '15_investments': {
    title: '15. Investeringar',
    description: '',
    Icon: undefined,
  },
}

function getReportedCategories(
  emissions: EmissionsScope['categories'],
): ReportedCategoryDefinition[] {
  return emissions
    ? Object.entries(emissions ?? {}).reduce(
        (categories, [category, value]) => {
          if (value) {
            categories.push({
              ...categoryDefinitions[category as Scope3Category],
              category: category as Scope3Category,
              value,
            })
          }
          return categories
        },
        [] as ReportedCategoryDefinition[],
      )
    : []
}

const reportedCategories = getReportedCategories(emissions)

function getGradeColor(count: number) {
  if (count > 9) return 'text-green-500'
  else if (count > 5) return 'text-orange-500'
  return 'text-red-600'
}
---

{
  emissions ? (
    <Card class="grid gap-4" level={2}>
      <h3 class="font-semibold">
        {companyName} rapporterar{' '}
        <span class="text-nowrap">
          <span class={getGradeColor(reportedCategories.length)}>
            {reportedCategories.length}
          </span>
          / 15
        </span>{' '}
        kategorier:
      </h3>
      <div class="grid gap-2 text-sm">
        {reportedCategories.map(({ Icon, title, description, value }) => (
          <Scope3EmissionsCategory
            {Icon}
            {title}
            {description}
            value={value.toLocaleString('sv-SE')}
          />
        ))}
      </div>
    </Card>
  ) : null
}
