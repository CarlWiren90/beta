---
import type { EmissionsScope, Scope3Category } from '@/data/companyData'
import Fa6SolidGifts from 'icons:astro/fa6-solid/gifts'
import MingcuteWashMachineLine from 'icons:astro/mingcute/wash-machine-line'
import IconParkOutlineSolarEnergyOne from 'icons:astro/icon-park-outline/solar-energy-one'
import IconParkOutlineTransport from 'icons:astro/icon-park-outline/transport'
import MakiWasteBasket from 'icons:astro/maki/waste-basket'
import ZondiconsTravelTrain from 'icons:astro/zondicons/travel-train'
import MaterialSymbolsCommuteOutline from 'icons:astro/material-symbols/commute-outline'
import IconParkOutlineWashingMachineOne from 'icons:astro/icon-park-outline/washing-machine-one'
import IconParkOutlineTransporter from 'icons:astro/icon-park-outline/transporter'
import IconParkOutlineGateMachine from 'icons:astro/icon-park-outline/gate-machine'
import MaterialSymbolsPersonPlayOutlineRounded from 'icons:astro/material-symbols/person-play-outline-rounded'
import IonTrashBin from 'icons:astro/ion/trash-bin'
import ClarityBuildingSolid from 'icons:astro/clarity/building-solid'
import BiHouses from 'icons:astro/bi/houses'
import StreamlineInvestmentSelection from 'icons:astro/streamline/investment-selection'
import Scope3EmissionsCategory from '../company/Scope3EmissionsCategory.astro'
import { Card } from '../ui/card'

interface Props {
  emissions: EmissionsScope['categories']
  companyName: string
}

const { emissions, companyName } = Astro.props

type CategoryDefinition = {
  title: string
  description: string
  Icon: astroHTML.JSX.Element
}

type ReportedCategoryDefinition = CategoryDefinition & {
  value: number
  category: Scope3Category
}

const categoryDefinitions: Record<Scope3Category, CategoryDefinition> = {
  '1_purchasedGoods': {
    title: '1. Inköpta varor och tjänster',
    description:
      'Utsläpp från produktion av varor och tjänster som köpts av organisationen.',
    Icon: Fa6SolidGifts,
  },
  '2_capitalGoods': {
    title: '2. Kapitalvaror',
    description: '',
    Icon: MingcuteWashMachineLine,
  },
  '3_fuelAndEnergyRelatedActivities': {
    title: '3. Bränsle- och energirelaterade aktiviteter',
    description: '',
    Icon: IconParkOutlineSolarEnergyOne,
  },
  '4_upstreamTransportationAndDistribution': {
    title: '4. Uppströms transport och distribution',
    description:
      'Utsläpp från transport och distribution av produkter som köpts av organisationen, dvs från sina leverantörer.',
    Icon: IconParkOutlineTransport,
  },
  '5_wasteGeneratedInOperations': {
    title: '5. Avfall genererat i verksamheten',
    description:
      'Utsläpp från avfall som genereras av organisationens verksamhet.',
    Icon: MakiWasteBasket,
  },
  '6_businessTravel': {
    title: '6. Affärsresor',
    description:
      'Utsläpp från transport av anställda för affärsrelaterade aktiviteter.',
    Icon: ZondiconsTravelTrain,
  },
  '7_employeeCommuting': {
    title: '7. Anställdas pendling',
    description:
      'Utsläpp från transport av anställda mellan deras hem och arbetsplatser.',
    Icon: MaterialSymbolsCommuteOutline,
  },
  '8_upstreamLeasedAssets': {
    title: '8. Uppströms leasade tillgångar',
    description: '',
    Icon: IconParkOutlineWashingMachineOne,
  },
  '9_downstreamTransportationAndDistribution': {
    title: '9. Nedströms transport och distribution',
    description: '',
    Icon: IconParkOutlineTransporter,
  },
  '10_processingOfSoldProducts': {
    title: '10. Bearbetning av sålda produkter',
    description: '',
    Icon: IconParkOutlineGateMachine,
  },
  '11_useOfSoldProducts': {
    title: '11. Användning av sålda produkter',
    description: '',
    Icon: MaterialSymbolsPersonPlayOutlineRounded,
  },
  '12_endOfLifeTreatmentOfSoldProducts': {
    title: '12. Slutbehandling av sålda produkter',
    description: '',
    Icon: IonTrashBin,
  },
  '13_downstreamLeasedAssets': {
    title: '13. Nedströms leasade tillgångar',
    description: '',
    Icon: ClarityBuildingSolid,
  },
  '14_franchises': {
    title: '14. Franchiser',
    description: '',
    Icon: BiHouses,
  },
  '15_investments': {
    title: '15. Investeringar',
    description: '',
    Icon: StreamlineInvestmentSelection,
  },
}

function getReportedCategories(
  emissions: EmissionsScope['categories'],
): ReportedCategoryDefinition[] {
  return emissions
    ? Object.entries(emissions ?? {}).reduce(
        (categories, [category, value]) => {
          if (value) {
            categories.push({
              ...categoryDefinitions[category as Scope3Category],
              category: category as Scope3Category,
              value,
            })
          }
          return categories
        },
        [] as ReportedCategoryDefinition[],
      )
    : []
}

const reportedCategories = getReportedCategories(emissions)

const { upstream, downstream } = reportedCategories.reduce(
  (result, c) => {
    if (Number(c.category.split('_')[0]) < 9) {
      result.upstream.push(c)
    } else {
      result.downstream.push(c)
    }
    return result
  },
  {
    upstream: [] as ReportedCategoryDefinition[],
    downstream: [] as ReportedCategoryDefinition[],
  },
)

function getGradeColor(count: number) {
  if (count > 9) return 'text-green-500'
  else if (count > 5) return 'text-orange-500'
  return 'text-red-600'
}
---

{
  emissions ? (
    <Card class="grid gap-4" level={2}>
      <h3 class="pb-4 leading-none tracking-tight sm:text-xl lg:text-2xl">
        {companyName} rapporterar{' '}
        <span class="text-nowrap">
          <span class={getGradeColor(reportedCategories.length)}>
            {reportedCategories.length}
          </span>
          / 15
        </span>{' '}
        kategorier:
      </h3>
      <div class="grid gap-2 text-sm">
        {upstream.length ? (
          <div class="grid gap-2">
            <h4 class="pb-2 text-lg leading-none tracking-tight">Uppströms</h4>
            {upstream.map(({ Icon, title, description, value }) => (
              <Scope3EmissionsCategory
                {Icon}
                {title}
                {description}
                value={value.toLocaleString('sv-SE')}
              />
            ))}
          </div>
        ) : null}

        {downstream.length ? (
          <div class="grid gap-2 pt-4">
            <h4 class="pb-2 text-lg leading-none tracking-tight">Nedströms</h4>
            {downstream.map(({ Icon, title, description, value }) => (
              <Scope3EmissionsCategory
                {Icon}
                {title}
                {description}
                value={value.toLocaleString('sv-SE')}
              />
            ))}
          </div>
        ) : null}
      </div>
    </Card>
  ) : null
}
