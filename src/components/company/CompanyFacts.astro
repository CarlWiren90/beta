---
import {
  getCompanyName,
  type CompanyData,
  getWikidataEmissionsYear,
} from '@/data/companyData'
import { Card } from '../ui/card'
import VerifiedBadge from '../VerifiedBadge.astro'

interface Props {
  company: CompanyData
  year: number
}

const { company, year } = Astro.props

function getWikidataReportURL(
  wikidata: CompanyData['wikidata'],
  year: number | string,
) {
  const potentialURL = getWikidataEmissionsYear(wikidata, year)?.reference
  // HACK: Ignore hallucinated URLs only return proper report URLs
  return potentialURL?.includes('wikidata.org') ? undefined : potentialURL
}

/*
 * HACK: We should really let the API handle data verification instead to deal with issues as close to the source as possible.
 */
function getTotalEmissions(company: CompanyData, year: number) {
  const emissions = company.emissions[year]
  const wiki = getWikidataEmissionsYear(company.wikidata, year)
  const facit = company.facit?.emissions?.[year]

  if (facit) {
    return {
      value:
        (facit.scope1?.emissions || 0) +
        (facit.scope2?.emissions || facit.scope2?.mb || facit.scope2?.lb || 0) +
        (facit.scope3?.emissions ||
          Object.values(facit.scope3?.categories ?? [])
            .filter(Boolean)
            .reduce((a, b) => (a ?? 0) + (b ?? 0), 0) ||
          0),
      verified: true,
    }
  } else if (wiki) {
    return {
      value:
        (wiki.scope1?.emissions || 0) +
        (wiki.scope2?.emissions || wiki.scope2?.mb || wiki.scope2?.lb || 0) +
        (wiki.scope3?.emissions ||
          Object.values(wiki.scope3?.categories ?? [])
            .filter(Boolean)
            .reduce((a, b) => (a ?? 0) + (b ?? 0), 0) ||
          0),
      verified: true,
    }
  }

  return {
    value: emissions
      ? (emissions.scope1?.emissions || 0) +
        (emissions.scope2?.emissions ||
          emissions.scope2?.mb ||
          emissions.scope2?.lb ||
          0) +
        (emissions.scope3?.emissions || 0)
      : 0,
    verified:
      emissions &&
      emissions.scope1?.verified &&
      emissions.scope2?.verified &&
      emissions.scope3?.verified,
  }
}

const totalEmissions = getTotalEmissions(company, year)

const reportURL =
  company.facit?.url ||
  getWikidataReportURL(company.wikidata, year) ||
  company.url
---

<Card class="text-sm" level={1}>
  <h1
    class="text-balance pb-4 pt-4 text-4xl leading-none tracking-tight md:pt-0 lg:text-5xl"
  >
    {getCompanyName(company)}
  </h1>
  <p class="text-muted">{company.description}</p>

  <div class="grid gap-4 pt-4 md:grid-cols-2">
    <Card class="flex flex-col justify-between gap-2" level={2}>
      {
        company.industryGics?.subIndustry?.name && (
          <div class="flex flex-wrap items-center justify-between gap-x-4 gap-y-1 text-sm">
            <h3>Bransch</h3>
            <p class="text-sm text-muted">
              {company.industryGics.subIndustry.name}
            </p>
          </div>
        )
      }

      {
        company.baseFacts?.[year]?.turnover && (
          <div class="flex flex-wrap items-center justify-between gap-x-4 gap-y-1 text-sm">
            <h3>Omsättning ({year})</h3>
            <p class="text-sm text-orange-250">
              {company.baseFacts[year].turnover.toLocaleString('sv-SE', {
                maximumFractionDigits: 0,
              }) +
                ' ' +
                company.baseFacts[year].unit}
            </p>
          </div>
        )
      }
      {
        company.baseFacts?.[year]?.employees && (
          <div class="flex flex-wrap items-center justify-between gap-x-4 gap-y-1 text-sm">
            <h3>Antal anställda ({year})</h3>
            <p class="text-sm text-orange-250">
              {company.baseFacts[year].employees.toLocaleString('sv-SE', {
                maximumFractionDigits: 0,
              })}
            </p>
          </div>
        )
      }

      {
        reportURL && (
          <span>
            Läs{' '}
            <a
              href={reportURL}
              class="self-start text-sm text-blue-500 underline"
            >
              hållbarhetsrapport
            </a>
          </span>
        )
      }
    </Card>

    {
      totalEmissions && (
        <Card level={2} class="flex flex-col justify-between gap-4">
          <div class="flex items-start justify-between">
            <h3 class="flex items-center gap-1">
              Totala utsläpp {year}{' '}
              {totalEmissions.verified && <VerifiedBadge />}
            </h3>
            <span class="text-muted">(ton CO₂e)</span>
          </div>

          <p class="text-3xl leading-none tracking-tight text-orange-250 sm:text-4xl md:text-5xl lg:text-6xl">
            {totalEmissions.value.toLocaleString('sv-SE', {
              maximumFractionDigits: 0,
            })}
          </p>
        </Card>
      )
    }
  </div>
</Card>
