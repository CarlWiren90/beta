---
import { getCompanyName, type CompanyData } from '@/data/companyData'
import { Card } from '../ui/card'
import VerifiedBadge from '../VerifiedBadge.astro'

interface Props {
  company: CompanyData
  year: number
}

const { company, year } = Astro.props

/**
 * Get the reporting period.
 *
 * For fiscal years following the calendar year, show the last reported year.
 * For non-calendar fiscal years, use special formatting
 */
function getPeriod(company: CompanyData) {
  const latestYearReported = Math.max.apply(
    0,
    Object.keys(company.emissions ?? {}).map(Number),
  )

  return company.fiscalYear && company.fiscalYear.startMonth !== 1
    ? `${latestYearReported - 1}/${latestYearReported}`
    : latestYearReported
}

const emissions = company.emissions[year]
const totalEmissions = emissions
  ? (emissions.scope1.emissions || 0) +
    (emissions.scope2.emissions ||
      emissions.scope2.mb ||
      emissions.scope2.lb ||
      0) +
    (emissions.scope3.emissions || 0)
  : 0

const totalEmissionsVerified =
  emissions &&
  emissions.scope1.verified &&
  emissions.scope2.verified &&
  emissions.scope3.verified

function getWikidataYear(wikidata: CompanyData['wikidata'], year: string) {
  const wantedYear = Array.isArray(wikidata?.emissions)
    ? wikidata.emissions.find((entry) => entry.year === year)
    : wikidata?.emissions?.[year]

  return wantedYear
}

function getWikidataReportURL(wikidata: CompanyData['wikidata'], year: string) {
  const potentialURL = getWikidataYear(wikidata, year)?.reference
  // HACK: Ignore hallucinated URLs only return proper report URLs
  return potentialURL?.includes('wikidata') ? undefined : potentialURL
}

const reportURL =
  company.facit?.url ||
  getWikidataReportURL(company.wikidata, String(year)) ||
  company.url
---

<Card class="text-sm" level={1}>
  <h1
    class="text-balance pb-4 pt-4 text-4xl leading-none tracking-tight md:pt-0 lg:text-5xl"
  >
    {getCompanyName(company)}
  </h1>
  <p class="text-muted">{company.description}</p>

  <div class="grid gap-4 pt-4 md:grid-cols-2">
    <Card class="flex flex-col justify-between gap-2" level={2}>
      {
        company.industryGics.industry.name && (
          <div class="flex flex-wrap items-center justify-between gap-x-4 gap-y-1 text-sm">
            <h3>Bransch</h3>
            <p class="text-sm text-muted">
              {company.industryGics.industry.name}
            </p>
          </div>
        )
      }

      {
        company.baseFacts[year]?.turnover &&
          // TODO: Use the last available year instead of hard coded year
          company.industryGics.industry.name && (
            <div class="flex flex-wrap items-center justify-between gap-x-4 gap-y-1 text-sm">
              <h3>Omsättning ({year})</h3>
              <p class="text-sm text-orange-250">
                {company.baseFacts[year].turnover.toLocaleString('sv-SE', {
                  maximumFractionDigits: 0,
                }) +
                  ' ' +
                  company.baseFacts[year].unit}
              </p>
            </div>
          )
      }
      {
        company.baseFacts[year]?.employees &&
          // TODO: Use the last available year instead of hard coded year
          company.baseFacts[year]?.employees && (
            <div class="flex flex-wrap items-center justify-between gap-x-4 gap-y-1 text-sm">
              <h3>Antal anställda ({year})</h3>
              <p class="text-sm text-orange-250">
                {company.baseFacts[year]?.employees.toLocaleString('sv-SE', {
                  maximumFractionDigits: 0,
                })}
              </p>
            </div>
          )
      }

      {
        reportURL && (
          <a
            href={reportURL}
            class="self-start text-sm text-blue-500 underline"
          >
            Läs hållbarhetsrapport för {getPeriod(company)}
          </a>
        )
      }
    </Card>

    {
      emissions &&
        (emissions.scope1.emissions ||
          emissions.scope2.mb ||
          emissions.scope3.emissions) && (
          <Card level={2} class="flex flex-col justify-between gap-4">
            <div class="flex items-start justify-between">
              <h3 class="flex items-center gap-1">
                Totala utsläpp (2023){' '}
                {totalEmissionsVerified && <VerifiedBadge />}
              </h3>
              <span class="text-muted">(ton CO₂e)</span>
            </div>

            <p class="text-3xl leading-none tracking-tight text-orange-250 sm:text-4xl md:text-5xl lg:text-6xl">
              {totalEmissions.toLocaleString('sv-SE', {
                maximumFractionDigits: 0,
              })}
            </p>
          </Card>
        )
    }
  </div>
</Card>
