---
import { type CompanyData } from '@/data/companyData'
import { Card } from '../ui/card'
import VerifiedBadge from '../VerifiedBadge.astro'

interface Props {
  company: CompanyData
  year: number
}

const { company, year } = Astro.props

// TODO: get reportURL from the source, and show this for every datapoint instead
// IDEA: Maybe use a common component to click a datapoint to open metadata about it, such as the source
// const reportURL =
//   company.facit?.url ||
//   getWikidataReportURL(company.wikidata, year) ||
//   company.url

const reportingPeriod = company.reportingPeriods[0]
---

<Card class="text-sm" level={1}>
  <h1
    class="text-balance pb-4 pt-4 text-4xl leading-none tracking-tight md:pt-0 lg:text-5xl"
  >
    {company.name}
  </h1>
  <p class="text-muted">{company.description}</p>

  <div class="grid gap-4 pt-4 md:grid-cols-2">
    <Card class="flex flex-col justify-between gap-2" level={2}>
      {
        company.industryGics?.sv?.subIndustryName && (
          <div class="flex flex-wrap items-center justify-between gap-x-4 gap-y-1 text-sm">
            <h3>Bransch</h3>
            <p class="text-sm text-muted">
              {company.industryGics?.sv?.subIndustryName}
            </p>
          </div>
        )
      }

      <!-- {
        reportingPeriod.baseFacts?.[year]?.turnover && (
          <div class="flex flex-wrap items-center justify-between gap-x-4 gap-y-1 text-sm">
            <h3>Omsättning ({year})</h3>
            <p class="text-sm text-orange-250">
              {company.baseFacts[year].turnover.toLocaleString('sv-SE', {
                maximumFractionDigits: 0,
              }) +
                ' ' +
                company.baseFacts[year].unit}
            </p>
          </div>
        )
      } -->
      <!-- {
        company.baseFacts?.[year]?.employees && (
          <div class="flex flex-wrap items-center justify-between gap-x-4 gap-y-1 text-sm">
            <h3>Antal anställda ({year})</h3>
            <p class="text-sm text-orange-250">
              {company.baseFacts[year].employees.toLocaleString('sv-SE', {
                maximumFractionDigits: 0,
              })}
            </p>
          </div>
        )
      } -->

      <!-- {
        reportURL && (
          <span>
            Läs{' '}
            <a
              href={reportURL}
              class="self-start text-sm text-blue-500 underline"
            >
              hållbarhetsrapport
            </a>
          </span>
        )
      } -->
    </Card>

    {
      reportingPeriod?.emissions?.calculatedTotalEmissions && (
        <Card level={2} class="flex flex-col justify-between gap-4">
          <div class="flex items-start justify-between">
            <h3 class="flex items-center gap-1">
              Totala utsläpp {year} {/* TODO: add verified in metadata */}
              {false && <VerifiedBadge />}
            </h3>
            <span class="text-muted">(ton CO₂e)</span>
          </div>

          <p class="text-3xl leading-none tracking-tight text-orange-250 sm:text-4xl md:text-5xl lg:text-6xl">
            {reportingPeriod.emissions.calculatedTotalEmissions.toLocaleString(
              'sv-SE',
              {
                maximumFractionDigits: 0,
              },
            )}
          </p>
        </Card>
      )
    }
  </div>
</Card>
